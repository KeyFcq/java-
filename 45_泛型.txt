泛型：提供了编译时类型安全检测机制，在编译时检测到非法的类型

格式：
	<类型>：指定一种类型的格式
	<类型1,类型2...>:指定多种类型的格式
	
好处：
	把运行时期的问题提前到了编译期间
	避免了强制类型转换
	
	
泛型类：
	格式：修饰符 class  类名<类型>{}
	  例：public class Genneric<T>{} 此处T可以随便写为任意标识，常见的 T、E、K、V
	  
泛型方法：
	格式：修饰符 <类型> 返回值类型 方法名(类型 变量){}
		例：public <T> void show(T t){}
	 
泛型接口：
	格式：修饰符 interface 接口名<类型>{}
		例：public interface Genneric<T>{}
		
类型通配符：
	类型通配符：<?>
		所有类型		List<?>:表示元素类型未知的List，它的元素可以匹配任何的类型
		上限        List<? extends Number>:表示的类型是 Number或者其子类型
		下限				List<? super Number>:表示的类型是 Number或者其父类类型